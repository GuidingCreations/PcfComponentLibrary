/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../.power/appschemas/dataSourcesInfo';
import { getPowerSdkInstance } from '@pa-client/power-code-sdk/lib/';
import type { CreateCalendarEvent_Response } from '../Models/Office365GroupsModel';
import type { IOperationResult } from '@pa-client/power-code-sdk/lib/';
import type { ListGroupMembers_Response } from '../Models/Office365GroupsModel';
import type { ListGroups_Response } from '../Models/Office365GroupsModel';
import type { ListOwnedGroups_Response } from '../Models/Office365GroupsModel';
import type { ListOwnedGroups_V2_Response } from '../Models/Office365GroupsModel';
import type { ObjectWithoutType } from '../Models/Office365GroupsModel';
import type { OnGroupMemberAddedOrRemoved_Response } from '../Models/Office365GroupsModel';
import type { OnNewEvent_Response } from '../Models/Office365GroupsModel';
import type { UpdateCalendarEvent_HTMLRequest } from '../Models/Office365GroupsModel';
import type { UpdateCalendarEvent_Request } from '../Models/Office365GroupsModel';

export class Office365GroupsService {
  private static readonly dataSourceName = 'office365groups';

  /**
   * List group members
   * This operation returns a list of all members in the given group and their details such as name, title, email, etc. You can query up to 1000 items using Top parameter. In case you need to retrieve more than 1000 values please turn on Settings->Pagination feature and provide Threshold limit.
   */
  public static async ListGroupMembers(groupId: string, $top?: number): Promise<IOperationResult<ListGroupMembers_Response>> {
    const parameters: { groupId: string, $top?: number } = { groupId, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, $top?: number }, ListGroupMembers_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListGroupMembers',
        parameters
      },
    });
    return result;
  }

  /**
   * When a group member is added or removed
   * This operation triggers when a member is added to or removed from the given group.
   */
  public static async OnGroupMembershipChange(groupId: string, $select?: string): Promise<IOperationResult<OnGroupMemberAddedOrRemoved_Response>> {
    const parameters: { groupId: string, $select?: string } = { groupId, $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string, $select?: string }, OnGroupMemberAddedOrRemoved_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'OnGroupMembershipChange',
        parameters
      },
    });
    return result;
  }

  /**
   * Add member to group
   * This operation is used to add a member to an O365 group, using a UPN.
   */
  public static async AddMemberToGroup(userUpn: string, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { userUpn: string, groupId: string } = { userUpn, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userUpn: string, groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'AddMemberToGroup',
        parameters
      },
    });
    return result;
  }

  /**
   * List my owned groups
   * This operation returns a list of all groups that you own.
   */
  public static async ListOwnedGroups(): Promise<IOperationResult<ListOwnedGroups_Response>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, ListOwnedGroups_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListOwnedGroups',
      },
    });
    return result;
  }

  /**
   * List my owned groups (V2)
   * This operation returns a list of all groups that you own.
   */
  public static async ListOwnedGroups_V2(extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean): Promise<IOperationResult<ListOwnedGroups_V2_Response>> {
    const parameters: { extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean } = { extractSensitivityLabel, fetchSensitivityLabelMetadata };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean }, ListOwnedGroups_V2_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListOwnedGroups_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * List groups that I own and belong to
   * This operation returns a list of all groups that you own and belong to.
   */
  public static async ListOwnedGroups_V3(extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean): Promise<IOperationResult<ListOwnedGroups_Response>> {
    const parameters: { extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean } = { extractSensitivityLabel, fetchSensitivityLabelMetadata };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean }, ListOwnedGroups_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListOwnedGroups_V3',
        parameters
      },
    });
    return result;
  }

  /**
   * List groups
   * This operation returns a list of all groups in the organization.
   */
  public static async ListGroups(extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean, $filter?: string, $top?: number, $skiptoken?: string): Promise<IOperationResult<ListGroups_Response>> {
    const parameters: { extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean, $filter?: string, $top?: number, $skiptoken?: string } = { extractSensitivityLabel, fetchSensitivityLabelMetadata, $filter, $top, $skiptoken };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean, $filter?: string, $top?: number, $skiptoken?: string }, ListGroups_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListGroups',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a group event
   * This operation is used to create a new event in a group calendar.
   */
  public static async CreateCalendarEvent(body: UpdateCalendarEvent_Request, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { body: UpdateCalendarEvent_Request, groupId: string } = { body, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: UpdateCalendarEvent_Request, groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'CreateCalendarEvent',
        parameters
      },
    });
    return result;
  }

  /**
   * Create a group event (V2)
   * This operation is used to create a new event in a group calendar.
   */
  public static async CreateCalendarEventV2(body: UpdateCalendarEvent_HTMLRequest, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { body: UpdateCalendarEvent_HTMLRequest, groupId: string } = { body, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: UpdateCalendarEvent_HTMLRequest, groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'CreateCalendarEventV2',
        parameters
      },
    });
    return result;
  }

  /**
   * Delete event (V2)
   * This operation deletes an event in a calendar.
   */
  public static async CalendarDeleteItem_V2(event: string, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { event: string, groupId: string } = { event, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ event: string, groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'CalendarDeleteItem_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Update a group event
   * This operation is used to update a new event in a group calendar.
   */
  public static async UpdateCalendarEvent(event: string, body: UpdateCalendarEvent_HTMLRequest, groupId: string): Promise<IOperationResult<CreateCalendarEvent_Response>> {
    const parameters: { event: string, body: UpdateCalendarEvent_HTMLRequest, groupId: string } = { event, body, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ event: string, body: UpdateCalendarEvent_HTMLRequest, groupId: string }, CreateCalendarEvent_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'UpdateCalendarEvent',
        parameters
      },
    });
    return result;
  }

  /**
   * Remove member from group
   * This operation is used to remove a member from an O365 group, using a UPN.
   */
  public static async RemoveMemberFromGroup(userUpn: string, groupId: string): Promise<IOperationResult<void>> {
    const parameters: { userUpn: string, groupId: string } = { userUpn, groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userUpn: string, groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'RemoveMemberFromGroup',
        parameters
      },
    });
    return result;
  }

  /**
   * When there is a new event
   * This operation triggers when a new event is added to a group calendar.
   */
  public static async OnNewEvent(groupId: string): Promise<IOperationResult<OnNewEvent_Response>> {
    const parameters: { groupId: string } = { groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string }, OnNewEvent_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'OnNewEvent',
        parameters
      },
    });
    return result;
  }

  /**
   * Send an HTTP request V2
   * Construct a Microsoft Graph REST API request to invoke. There is one segment that is supported: /groups. Learn more: https://docs.microsoft.com/en-us/graph/use-the-api.
   */
  public static async HttpRequestV2(Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string): Promise<IOperationResult<ObjectWithoutType>> {
    const parameters: { Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string } = { Uri, Method, Body, ContentType, CustomHeader1, CustomHeader2, CustomHeader3, CustomHeader4, CustomHeader5 };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string }, ObjectWithoutType>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'HttpRequestV2',
        parameters
      },
    });
    return result;
  }

  /**
   * Send an HTTP request
   * Construct a Microsoft Graph REST API request to invoke. Learn more: https://docs.microsoft.com/en-us/graph/use-the-api
   */
  public static async HttpRequest(Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string): Promise<IOperationResult<ObjectWithoutType>> {
    const parameters: { Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string } = { Uri, Method, Body, ContentType, CustomHeader1, CustomHeader2, CustomHeader3, CustomHeader4, CustomHeader5 };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string }, ObjectWithoutType>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'HttpRequest',
        parameters
      },
    });
    return result;
  }

  /**
   * List deleted groups
   * Lists deleted groups that can be restored.
   */
  public static async ListDeletedGroups(): Promise<IOperationResult<ListGroups_Response>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, ListGroups_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListDeletedGroups',
      },
    });
    return result;
  }

  /**
   * Restore a deleted group
   * Restore a recently deleted group
   */
  public static async RestoreDeletedGroup(groupId: string): Promise<IOperationResult<void>> {
    const parameters: { groupId: string } = { groupId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ groupId: string }, void>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'RestoreDeletedGroup',
        parameters
      },
    });
    return result;
  }

  /**
   * List deleted groups by owner
   * List deleted groups that can be restored by owner
   */
  public static async ListDeletedGroupsByOwner(userId: string): Promise<IOperationResult<ListGroups_Response>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, ListGroups_Response>({
      connectorOperation: {
        tableName: Office365GroupsService.dataSourceName,
        operationName: 'ListDeletedGroupsByOwner',
        parameters
      },
    });
    return result;
  }
}
