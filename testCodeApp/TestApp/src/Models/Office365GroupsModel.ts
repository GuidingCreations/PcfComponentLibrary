/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

export interface SensitivityLabelMetadata {
  // SensitivityLabel Id.
  sensitivityLabelId?: string;
  // SensitivityLabel name.
  name?: string;
  // SensitivityLabel displayName info
  displayName?: string;
  // SensitivityLabel details on tooltip.
  tooltip?: string;
  // SensitivityLabel priority.
  priority?: number;
  // SensitivityLabel color.
  color?: string;
  //  is  SensitivityLabel Encrypted.
  isEncrypted?: boolean;
  // Whether  SensitivityLabel is Enabled.
  isEnabled?: boolean;
  // Whether  SensitivityLabel is Parent.
  isParent?: boolean;
  // Parent  SensitivityLabel Id.
  parentSensitivityLabelId?: string;
}

export interface ListGroupMembers_Response {
  // The OData context.
  "@odata.context"?: string;
  // Only used in Power Apps Canvas to genereate the `$skipToken` for pagination. Power Automate and Logic Apps must use the pagination setting.
  "@odata.nextLink"?: string;
  // value
  value?: {
    // Unique id of the user.
    id?: string;
    // User's display name.
    displayName?: string;
    // User's first name.
    givenName?: string;
    // User's job title.
    jobTitle?: string;
    // User's email address.
    mail?: string;
    // User's mobile number.
    mobilePhone?: string;
    // User's office address.
    officeLocation?: string;
    // User's last name.
    surname?: string;
    // UPN id of the user.
    userPrincipalName?: string;
  };
}

export type OnGroupMemberAddedOrRemoved_Response = unknown;

export interface ListOwnedGroups_Response {
  // The OData context.
  "@odata.context"?: string;
  // value
  value?: {
    // O365 group classification.
    classification?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    createdDateTime?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    deletedDateTime?: string;
    // More information about the group.
    description?: string;
    // O365 group name.
    displayName?: string;
    // Unique identifier of the group.
    id?: string;
    // Email address of the group.
    mail?: string;
    // True if mail is enabled for the group.
    mailEnabled?: boolean;
    // Group nickname.
    mailNickname?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    onPremisesLastSyncDateTime?: string;
    // The on-premises security identifier.
    onPremisesSecurityIdentifier?: string;
    // True if on-premises sync is enabled for the group.
    onPremisesSyncEnabled?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    renewedDateTime?: string;
    // True if the owner is security enabled.
    securityEnabled?: boolean;
    // The owner's visibility.
    visibility?: string;
    // List of Sensitivity Label Information
    sensitivityLabelInfo?: SensitivityLabelMetadata[];
  };
}

export interface ListOwnedGroups_V2_Response {
  // The OData context.
  "@odata.context"?: string;
  // value
  value?: {
    // O365 group classification.
    classification?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    createdDateTime?: string;
    // More information about the group.
    description?: string;
    // O365 group name.
    displayName?: string;
    // Unique identifier of the group.
    id?: string;
    // Email address of the group.
    mail?: string;
    // True if mail is enabled for the group.
    mailEnabled?: boolean;
    // Group nickname.
    mailNickname?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    onPremisesLastSyncDateTime?: string;
    // The on-premises security identifier.
    onPremisesSecurityIdentifier?: string;
    // True if on-premises sync is enabled for the group.
    onPremisesSyncEnabled?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    renewedDateTime?: string;
    // True if the owner is security enabled.
    securityEnabled?: boolean;
    // The owner's visibility.
    visibility?: string;
    // List of Sensitivity Label Information
    sensitivityLabelInfo?: SensitivityLabelMetadata[];

    groupTypes: string[]
  };
}

export interface ListGroups_Response {
  // The OData context.
  "@odata.context"?: string;
  // Only used in Power Apps Canvas to genereate the `$skipToken` for pagination. Power Automate and Logic Apps must use the pagination setting.
  "@odata.nextLink"?: string;
  // value
  value?: {
    // O365 group classification.
    classification?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    createdDateTime?: string;
    // More information about the group.
    description?: string;
    // O365 group name.
    displayName?: string;
    // Unique identifier of the group.
    id?: string;
    // Email address of the group.
    mail?: string;
    // True if mail is enabled for the group.
    mailEnabled?: boolean;
    // Group nickname.
    mailNickname?: string;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    onPremisesLastSyncDateTime?: string;
    // The on-premises security identifier.
    onPremisesSecurityIdentifier?: string;
    // True if on-premises sync is enabled for the group.
    onPremisesSyncEnabled?: boolean;
    // yyyy-MM-ddTHH:mm:ss.fffZ (ISO8601 format, UTC timezone)
    renewedDateTime?: string;
    // True if the owner is security enabled.
    securityEnabled?: boolean;
    // The owner's visibility.
    visibility?: string;
    // List of Sensitivity Label Information
    sensitivityLabelInfo?: SensitivityLabelMetadata[];
  };
}

export interface CreateCalendarEvent_Response {
  // Unique id of the event.
  id?: string;
  // Time in minutes before event starts to remind.
  reminderMinutesBeforeStart?: number;
  // Set to true if the event has a reminder.
  isReminderOn?: boolean;
  // Title of the event.
  subject?: string;
  // The importance of the event: Low, Normal, or High.
  importance?: string;
  // True if the event is an all day event.
  isAllDay?: boolean;
  // True if a response was requested for the event.
  responseRequested?: boolean;
  // Status to show during the event.
  showAs?: string;
  // body
  body?: {
    // Text or Html.
    contentType?: string;
    // The content of the body of this event.
    content?: string;
  };
  // start
  start?: {
    // Start time of the event (example: '2016-11-01T14:30:00-07:00').
    dateTime?: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone?: string;
  };
  // end
  end?: {
    // End time of the event (example: '2016-11-01T15:30:00-07:00').
    dateTime?: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone?: string;
  };
  // location
  location?: {
    // The display name for the location of the event.
    displayName?: string;
  };
}

export interface UpdateCalendarEvent_Request {
  // Title of the event.
  subject: string;
  start: {
    // Start time of the event (example: '2016-11-01T14:30:00').
    dateTime: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone: string;
  };
  end: {
    // End time of the event (example: '2016-11-01T15:30:00').
    dateTime: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone: string;
  };
  body?: {
    // Body of the message associated with the event.
    content?: string;
    // Pick the content type: Text or Html.
    contentType?: string;
  };
  location?: {
    // Location of the event.
    displayName?: string;
  };
  // The importance of the event: Low, Normal, or High.
  importance?: string;
  // Set to true if the event lasts all day.
  isAllDay?: boolean;
  // Set to true if the event has a reminder.
  isReminderOn?: boolean;
  // Time in minutes before event start to remind.
  reminderMinutesBeforeStart?: number;
  // Status to show during the event.
  showAs?: string;
  // Set to true if the sender would like a response when the event is accepted or declined.
  responseRequested?: boolean;
}

export interface UpdateCalendarEvent_HTMLRequest {
  // Title of the event.
  subject: string;
  start: {
    // Start time of the event (example: '2016-11-01T14:30:00').
    dateTime: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone: string;
  };
  end: {
    // End time of the event (example: '2016-11-01T15:30:00').
    dateTime: string;
    // Time zone of the event, specified as a time zone index value (example: 'Pacific Standard Time').
    timeZone: string;
  };
  body?: {
    // Body of the message associated with the event.
    content?: string;
    // Pick the content type: Text or Html.
    contentType: string;
  };
  location?: {
    // Location of the event.
    displayName?: string;
  };
  // The importance of the event: Low, Normal, or High.
  importance?: string;
  // Set to true if the event lasts all day.
  isAllDay?: boolean;
  // Set to true if the event has a reminder.
  isReminderOn?: boolean;
  // Time in minutes before event start to remind.
  reminderMinutesBeforeStart?: number;
  // Status to show during the event.
  showAs?: string;
  // Set to true if the sender would like a response when the event is accepted or declined.
  responseRequested?: boolean;
}

export type OnNewEvent_Response = unknown;

export type ObjectWithoutType = object;
